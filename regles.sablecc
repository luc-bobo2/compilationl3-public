Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
chiffre = ['0' .. '9'];
alphanum = [lettre + chiffre];
alpha = [lettre + ['_' + '$']];

Tokens

espaces = (' ' | 13 | 10)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);

ou = '|';
et = '&';
plus = '+';
moins = '-';
fois = '*';
diviser = '\';
non = '!';
ouvrante = '(';
fermante = ')';
egal = '=';
inf = '<';
si = 'si';
alors = 'alors';
sinon = 'sinon';
tantque = 'tantque';
faire = 'faire';
entier = 'entier';
retour = 'retour';
lire = 'lire';
ecrire = 'ecrire';
point_virgule = ';';
virgule = ',';
acco_open = '{';
acco_close = '}';
croch_open = '[';
croch_closed = ']';
nombre = chiffre+;
id = alpha alphanum*;

Ignored Tokens

espaces, commentaire;

Productions

// programme = optdecvar listedecfonc ;

// GRAMMAIRE DES INSTRUCTIONS

instr = 
{if} siblock |
{while} while |
{retouri} retourinstr;

listeinst =
{linstrec} instr listeinst |
{linstfinal};

appelfct =
{param} id ouvrante listeexp fermante point_virgule |
{noparam} id ouvrante fermante point_virgule ;

siblock =  
{sinon} si exp alors instrblock sinonblock |
{si} si exp alors instrblock ;

sinonblock =
{sinon} sinon instrblock;

while = 
{while} tantque exp faire instrblock;

retourinstr = 
{return} retour exp point_virgule;

affect = 
{affect} var egal exp point_virgule ;

instrblock = 
{blockinstr} acco_open listeinst acco_close ;

ecriture = 
{fctecrire} ecrire ouvrante exp fermante point_virgule ;


// GRAMMAIRE DES DECLARATIONS DE VARIABLES ET FONCTIONS

var =
{tab} id croch_open exp croch_closed |
{simple} id ;

//listeexp =
//{bis} exp listeexpbis |
//{vide} ;

//listeexpbis =
//{end} virgule exp listeexpbis |
//{vide} ;

//listeoptionelle =
//{option} listeexp point_virgule |
//{vide} ;

declvar =
{tab} entier id croch_open nombre croch_closed point_virgule |
{simple} entier id point_virgule;

listeexp =	
{recursif} exp bis|	
{simple} exp ;	

bis =	
{end} virgule exp |	
{recursif} virgule exp bis;

// GRAMMAIRE DES EXPRESSIONS ARITHMETIQUES 

exp = 
{ou} exp ou e6 |
{e6} e6;

e6 = 
{et} e6 et e5 | 
{e5} e5;

e5 = 
{egal} e5 egal e4 | 
{inf} e5 inf e4 | 
{e4} e4;

e4 = 
{plus} e4 plus e3 | 
{moins} e4 moins e3 |
{e3} e3;

e3 = 
{fois} e3 fois e2 | 
{diviser} e3 diviser e2 | 
{e2} e2;

e2= 
{excl} non e1 | 
{e1} e1;

e1 = 
{parenthese} ouvrante exp fermante | 
{e0} e0;

e0 = 
{number} nombre | 
{appelfct} appelfct |
{lire} lire ouvrante fermante |
{variable} var;



