Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
chiffre = ['0' .. '9'];
alphanum = [lettre + chiffre];
alpha = [lettre + ['_' + '$']];

Tokens

espaces = (' ' | 13 | 10)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);

plus = '+';
moins = '-';
fois = '*';
diviser = '\';

ou = '|';
et = '&';
non = '!';
egal = '=';
inf = '<';

point_virgule = ';';
virgule = ',';
ouvrante = '(';
fermante = ')';
acco_open = '{';
acco_close = '}';
croch_open = '[';
croch_closed = ']';

si = 'si';
alors = 'alors';
sinon = 'sinon';
tantque = 'tantque';
faire = 'faire';
retour = 'retour';

entier = 'entier';
lire = 'lire';
ecrire = 'ecrire';

nombre = chiffre+;
id = alpha alphanum*;


Ignored Tokens

espaces, commentaire;

Productions

programme =
{avecvar} optdecvar listedecfonc |
{sansvar} listedecfonc;

optdecvar = listedecvar point_virgule;

listedecvar =
{decvarldecvar} decvar listedecvarbis |
{decvar} decvar;

listedecvarbis =
{decvarldecvar} virgule decvar listedecvarbis|
{decvar} virgule decvar ;

decvar =
{decvarentier} entier id |
{decvartableau} entier id croch_open nombre croch_closed ;

listedecfonc =
{ldecfoncrec} decfonc listedecfonc |
{ldecfoncfinal} ;

decfonc =
{decvarinstr} id listeparam optdecvar instrblock |
{instr} id listeparam instrblock ;

listeparam =
{sansparam} ouvrante fermante |
{avecparam} ouvrante listedecvar fermante ;


// GRAMMAIRE DES INSTRUCTIONS

instr =
{affect} affect |
{blockinstr} instrblock |
{appelfct} instrappel |
{if} siblock |
{while} while |
{empty} instrvide |
{ecrire} ecriture |
{retouri} retourinstr;

listeinstr =
{linstrec} instr listeinstr |
{linstfinal};

instrvide = point_virgule;

instrappel = appelfct point_virgule ;

appelfct =
{param} id ouvrante listeexp fermante  |
{noparam} id ouvrante fermante  ;

siblock =
{sinon} si exp alors instrblock sinonblock |
{si} si exp alors instrblock ;

sinonblock =
{sinon} sinon instrblock;

while =
{while} tantque exp faire instrblock;

retourinstr =
{return} retour exp point_virgule;

affect =
{affect} var egal exp point_virgule ;

instrblock =
{blockinstr} acco_open listeinstr acco_close ;

ecriture =
{fctecrire} ecrire ouvrante exp fermante point_virgule ;


// GRAMMAIRE DES DECLARATIONS DE VARIABLES ET FONCTIONS

var =
{tab} id croch_open exp croch_closed |
{simple} id;

// Declaration liste d'expressions
listeexp =
{recursif} exp bis|
{simple} exp;

bis =
{end} virgule exp |
{recursif} virgule exp bis;

// GRAMMAIRE DES EXPRESSIONS ARITHMETIQUES

exp =
{ou} exp ou e6 |
{e6} e6;

e6 =
{et} e6 et e5 |
{e5} e5;

e5 =
{egal} e5 egal e4 |
{inf} e5 inf e4 |
{e4} e4;

e4 =
{plus} e4 plus e3 |
{moins} e4 moins e3 |
{e3} e3;

e3 =
{fois} e3 fois e2 |
{diviser} e3 diviser e2 |
{e2} e2;

e2=
{excl} non e1 |
{e1} e1;

e1 =
{parenthese} ouvrante exp fermante |
{e0} e0;

e0 =
{number} nombre |
{appelfct} appelfct |
{lire} lire ouvrante fermante |
{variable} var;



